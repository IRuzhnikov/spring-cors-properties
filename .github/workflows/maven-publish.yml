# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 0400 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 0400 ~/.ssh/id_rsa.pub

      - run: |
          git config --global user.email "ruzhnikov.ivan@gmail.com"
          git config --global user.name "IRuzhnikov"

      - uses: actions/checkout@v3

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'adopt'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_KEY_CONTENTS }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      
      - name: Clean
        run: mvn release:clean
        
      - name: Prepare
        run: mvn release:prepare

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY_CONTENTS }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish to Sonatype
        run: mvn release:perform -Dgpg.keyname=${{ secrets.SIGNING_KEYID }} -Dgpg.passphrase=${{ secrets.SIGNING_PASSWORD }} -Dgpg.executable=gpg2 -X
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
